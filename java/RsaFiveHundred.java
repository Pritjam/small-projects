import java.math.BigInteger;

class RsaFiveHundred {
  public static BigInteger sign(BigInteger m, BigInteger k, BigInteger n) {
    // to sign: Sign(m; k) = R(m,k) where m is message and k is private key
    // R(m,k,n) = m^k (mod n)
    BigInteger s = m.modPow(k, n);
    return s;
  }

  public static void main(String[] args) {
    BigInteger message = new BigInteger("19123950366235782949483997793294609537324205770225008275391841596581948918952473703135873087737235601300866845678134371260866309891162387388701931232731135035768874846566410683345095979943222327409086909808769607335790753767796590750725527834703838175622954229399083721873875974859131105559726266431235333396046648995883220225241890408687270097082003430348177180152589428021661268753607988824878080644610818238115130935892918707065896736380731005602961741817780271256608290225682898664214403918498302759730371031369994215184588933022467912313573370466325984864704717160786587265081124705622322319381624544702371619238");
    BigInteger publicMod = new BigInteger(
        "404754640406495885442825203216550636567077453791827416902036629725225447041239141618854677027551496735038852645441582329813321001507537775311165682002483140060846756844162956773235703438525252926659636227204201942089500959585588293384352875574069554653707111130096813118951011630357910172941385509377767267819822913612096630889394533995056575947553110017261061952078752241821933902271516138337675366919601961193915458650199057750340979233871726307511196673829993408246079865612485840968215616308394365237974941393736342649476805848331852731750595344769950325488461443630974784668237436272470167604575815537222686298556864437986519281657182277386867627246762504476838211413781889437073594099875303506036711548444370045215971790090430390822468226118499964378109013941703585977314408570553198728832011791867839459457610092864086134821758826071113227172982528578923196778061825983612158787469501296428059752753811501388745169722695450973091210052245278808820913628978200520879333791736586243638899289141322734973904566105342569373881597462461839169331925230404025302599179529595766747951310060784569911717962393468026162871723003219885869729266081041240994979079156852388559375258468345956214622148789672484843387154338869363668256675397");
    //BigInteger givenSignature = new BigInteger(
        //"583994547440733067932912159807370065622326521280118713887535453820464385592004639660120733150010173524440489282651201422075953956598315024995579901179851360907548358131470903698551122075343321531964364578804904480264281994840708992781945412367819774541022682876865055814477250417423644568962026292709372532117155640952397503230384355156301608689610186404759068335509267982405752076402103034588061405304216850538524382498248287321450155866496922022237898264864031438902958310890672666335884707737423871522700057236153083076617336397086485452225866377737457718070909668780166376375636168625264759577494929013219157945252863325910731553853591089819275960253455547647469488380475704015307648993827543369277726735783963444239232288914280828188197454644004298397294496774378435184746030012738723878155261030514569398776285828851748652343986903256708529106788438738671938559216845856468757973455612821493375956297895753200083607576403922324408592731270629687591173650424860259567722289099248002098925240254604796022007798683237504727694923622807577780057629256831371531638726849995078227408188329251127608709090962574656651606510962373003276078415552514074702741766467772601859805050781692574358477504973983402984698810678318984682245889356");
    BigInteger publicExponent = new BigInteger("65537");
    BigInteger privateExponent = publicExponent.modInverse(publicMod); //Modular
    // Multiplicative Inverse of publicExponent mod publicMod

    BigInteger signature = sign(message, privateExponent, publicMod);
    System.out.println(signature);
  }
}